#!/usr/bin/python3 -tt
# modbus2mqtt - Modbus master with MQTT publishing
#
# Written and (C) 2015 by Oliver Wagner <owagner@tellerulam.com>
# Provided under the terms of the MIT license
# Extended and refactored (C) 2020 by Louis Lagendijk >louis.lagendijk@gmail.com>
#
# Requires:
# - Eclipse Paho for Python - http://www.eclipse.org/paho/clients/python/
# - modbus-tk for Modbus communication - https://github.com/ljean/modbus-tk/
#

import argparse
import logging
import logging.handlers
import time
import socket
import paho.mqtt.client as mqtt
import serial
import io
import sys
import csv
import signal
import json

import modbus_tk
import modbus_tk.defines as cst
from modbus_tk import modbus_rtu
from modbus_tk import modbus_tcp

from modbusConfig import modbusConfig
from Register import Register
from hass_discovery import hass_discovery

sw_name = "modbus2mqtt"
sw_version = "0.5"

def signal_handler(signal, frame):
    print('Exiting ' + sys.argv[0])
    sys.exit(0)


def messagehandler(mqc, userdata, msg):

    try:
        (_prefix, function, slaveid, functioncode,
         register) = msg.topic.split("/")
        if function != 'set':
            return
        if int(slaveid) not in range(0, 255):
            logging.warning("on message - invalid slaveid " + msg.topic)
            return

        if not (int(register) >= 0 and int(register) < float("inf")):
            logging.warning("on message - invalid register " + msg.topic)
            return

        if functioncode == str(cst.WRITE_SINGLE_COIL):
            logging.info("Writing single coil " + register)
        elif functioncode == str(cst.WRITE_SINGLE_REGISTER):
            logging.info("Writing single register " + register)
        else:
            logging.error("Error attempting to write - invalid function code " +
                          msg.topic)
            return

        _res = master.execute(int(slaveid),
                              int(functioncode),
                              int(register),
                              output_value=int(msg.payload))

    except Exception as e:
        logging.error("Error on message " + msg.topic + " :" + str(e))


def connecthandler(mqc, userdata, rc):
    topic = userdata
    logging.info("Connected to MQTT broker with rc=%d" % (rc))
    mqc.subscribe(topic + "set/+/" + str(cst.WRITE_SINGLE_REGISTER) + "/+")
    mqc.subscribe(topic + "set/+/" + str(cst.WRITE_SINGLE_COIL) + "/+")
    logging.info('Sending "online" to topic %s' % (topic + "connected"))
    # mqc.publish(topic + "connected", 'Online', qos=2, retain=True)


def disconnecthandler(mqc, userdata, rc):
    logging.warning("Disconnected from MQTT broker with rc=%d" % (rc))


def updateCallback(topic, value):
    global changed
    global valuedict
    changed = True
    valuedict[topic] = value


def jsonOutput(mqc, topic, valueDict):
    valueJson = json.dumps(valueDict)
    logging.debug("Publishing json to: " + topic)
    mqc.publish(topic, valueJson)


def get_value(row, defaultrow, key):
    value = row[key]
    if value is None or value == "":
        if key in defaultrow:
            value = defaultrow[key]
    return value


signal.signal(signal.SIGINT, signal_handler)
version = "0.6"

parser = argparse.ArgumentParser(description='Bridge between ModBus and MQTT')
parser.add_argument('--config',
                    default="/etc/modbus2mqtt/modbus2mqtt.conf",
                    help='path to the configuration file')
args = parser.parse_args()
config = modbusConfig(args.config)

if config.loglevel:
    logging.getLogger().setLevel(config.loglevel)
if config.syslog:
    logging.getLogger().addHandler(logging.handlers.SysLogHandler())
else:
    logging.getLogger().addHandler(logging.StreamHandler(sys.stdout))

logging.info('Starting modbus2mqtt V%s with topic prefix \"%s\"' %
             (version, config.mqtt.topic_prefix))

try:
    logging.info("Connecting to MQTT server {}:{}".format(
        config.mqtt.host, config.mqtt.port))
    clientid = config.mqtt.clientid + "-" + str(time.time())
    mqc = mqtt.Client(client_id=clientid, userdata=config.mqtt.topic_prefix)
    if config.mqtt.username:
        mqc.username_pw_set(config.mqtt.username, config.mqtt.password)
    mqc.on_connect = connecthandler
    mqc.on_message = messagehandler
    mqc.on_disconnect = disconnecthandler
    mqc.will_set(config.mqtt.topic_prefix + "connected", "Offline", qos=2, retain=True)
    mqc.disconnected = True
    mqc.connect(config.mqtt.host, port=config.mqtt.port, keepalive=60)
    mqc.loop_start()

    if config.modbus_interface == "RTU":
        logging.info(
            "opening connection to modbus-RTU device {}, {} baud, parity: {}".format(config.rtu.port, config.rtu.baud, config.rtu.parity))
        master = modbus_rtu.RtuMaster(
            serial.serial_for_url(config.rtu.port,
                                  baudrate=config.rtu.baud,
                                  parity=config.rtu.parity[0].upper()))
    elif config.modbus_interface == "TCP":
        logging.info(
            "opening TCP connection to modbus-TCP server at {}:{}".format(
                config.tcp.host, config.tcp.port))
        master = modbus_tcp.TcpMaster(config.tcp.host, config.tcp.port)
    else:
        logging.error(
            "You must specify a valid modbus access method, either RTU or TCP")
        sys.exit(1)

    master.set_verbose(True)
    master.set_timeout(5.0)

    if config.mqtt.publish_homeassistant:
        hass = hass_discovery(sw_version, config.devicename, config.mqtt.topic_prefix)
    else:
        hass = None
    
    registers = []
    defaultrow = {
        # commented fields cannot be set from "DEFAULT"
        #"Topic": None
        #"Register": None,
        #"DomoticzIdx": None,
        "Unit": None,
        "Icon": None,
        "Size": 1,
        "DataFormat": ">H",
        "Multiplier": 1,
        "Outputformat": "%f",
        "Frequency": 60,
        "Slave": 1,
        "FunctionCode": 3,
    }

    # Now lets read the register definition
    if sys.version > '3':
        csvfile = open(config.device_definition, newline='')
    else:
        csvfile = open(config.device_definition, "r")

    with csvfile:
        dialect = csv.Sniffer().sniff(csvfile.read(8192))
        csvfile.seek(0)
        reader = csv.DictReader(csvfile,
                                fieldnames=[
                                    "Topic", "Register", "DomoticzIdx", "Unit", "Icon", "Size",
                                    "DataFormat", "Multiplier", "OutputFormat",
                                    "Frequency", "Slave", "FunctionCode"
                                ],
                                dialect="excel")
        for row in reader:
           
            # Skip header row
            if row["Frequency"] == "Frequency":
                continue
            # Skip Comment and empty lines (no topic)
            if row["Topic"] == None or row["Topic"] == "":
                continue
            if row["Topic"][0] == "#":
                continue
            if row["Topic"] == "DEFAULT":
                temp = dict(
                    (k, v) for k, v in row.items() if v is not None and v != "")
                defaultrow.update(temp)
                continue
            freq = get_value(row, defaultrow, "Frequency")
            slave = get_value(row, defaultrow, "Slave")
            fc = get_value(row, defaultrow, "FunctionCode")
            output_format = get_value(row, defaultrow, "OutputFormat")
            data_format = get_value(row, defaultrow, "DataFormat")
            multiplier = get_value(row, defaultrow, "Multiplier")
            size = get_value(row, defaultrow, "Size")
            unit = get_value(row, defaultrow, "Unit")
            icon = get_value(row, defaultrow, "Icon")
            # no defaults for the following...
            topic = row["Topic"]
            domoticz_idx = row["DomoticzIdx"]
            register = row["Register"]
            
            r = Register(config.mqtt, topic, register,
                         domoticz_idx, size, data_format, multiplier,
                         output_format, freq, slave, fc)
            registers.append(r)

            if hass:
                hass.addRegister(topic, unit, icon)

    logging.info('Read %u valid register definitions from \"%s\"' %
                 (len(registers), config.device_definition))
except Exception as e:
    logging.error("Unhandled error parsing register definitions [" + str(e) +
                  "] in row : " + str(row))
    sys.exit(1)

try:
    if hass:
        hass.publish(mqc)
except Exception as e:
    logging.error("Error in publishing auto discovery for homeassistant")
    exit(1)
try:
    logging.info('Sending "Online" to topic %s' % (config.mqtt.topic_prefix + "connected"))
    mqc.publish(config.mqtt.topic_prefix + "connected", payload = 'Online', qos=2, retain=True)
    changed = False
    valuedict = {}
    while True:
        for r in registers:
            r.checkpoll(master, mqc, updateCallback)
        if changed and config.mqtt.publish_json:
            json_topic = config.mqtt.topic_prefix + "SENSOR"
            jsonOutput(mqc, json_topic, valuedict)
            changed = False
        time.sleep(1)

except Exception as e:
    logging.error("Unhandled error [" + str(e) + "]")
    sys.exit(1)
